openapi: 3.0.3
info:
  title: Swagger - OpenAPI 3.0
  description: Swagger - OpenAPI 3.0 - BookAndAuthor
  contact:
    email: csabavadasz79@gmail.com
  version: 1.0.0
servers:
  - url: 'http://localhost:8080'
paths:
  /books:
    put:
      tags:
        - book
      summary: Update an existing book
      description: Update an existing book by Id
      operationId: updateBook
      requestBody:
        description: Update an existent book in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid ID supplied
        '404':
          description: Book not found
        '405':
          description: Validation exception
    post:
      tags:
        - book
      summary: Add a new book to the store
      description: Add a new book to the store
      operationId: addBook
      requestBody:
        description: Create a new book in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '405':
          description: Invalid input
  /books/{bookId}:
    get:
      tags:
        - book
      summary: Find book by ID
      description: Returns a single book
      operationId: getBookById
      parameters:
        - name: bookId
          in: path
          description: ID of book to return
          required: true
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid ID supplied
        '404':
          description: Book not found
    delete:
      tags:
        - book
      summary: Deletes a book
      description: delete a book
      operationId: deleteBook
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: bookId
          in: path
          description: Book
      responses:
        '204':
          description: successful operation
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          description: Id of book entity
          type: string
          format: uuid
          example: '3a8ea9f1-1a95-4caf-932f-2f988052933b'
        createdBy:
          description: User id who created book entity
          type: string
          format: uuid
          example: '3a8ea9f1-1a95-4caf-932f-2f988052933b'
        updatedBy:
          description: User id who updated book entity
          type: string
          format: uuid
          example: '3a8ea9f1-1a95-4caf-932f-2f988052933b'
        createdAt:
          description: Creation time of book entity
          type: string
          format: date-time
          example: '2019-01-21T05:47:08.644'
        updatedAt:
          description: Updated time of book entity
          type: string
          format: date-time
          example: '2019-01-21T05:47:08.644'
        title:
          description: Title of book entity
          type: string
          example: 'Cat Among the Pigeons'
        availability:
          type: string
          description: Status of book availability
          example: AVAILABLE
          enum:
            - AVAILABLE
            - ARCHIVE
            - DELETED
